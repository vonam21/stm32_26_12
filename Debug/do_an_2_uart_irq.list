
do_an_2_uart_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004240  08004240  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004240  08004240  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004240  08004240  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  2000005c  080042a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080042a4  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd1a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dbf  00000000  00000000  0002cde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  0002eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f6  00000000  00000000  0002f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018369  00000000  00000000  00030256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e937  00000000  00000000  000485bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f387  00000000  00000000  00056ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b74  00000000  00000000  000e6280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e9df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080040b8 	.word	0x080040b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080040b8 	.word	0x080040b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <count_cycles_state>:
uint32_t count,cycles,count_cycles[100],arr[100];
uint8_t data[4];
uint8_t arr_low[50];
uint8_t arr_high[50];
uint8_t arr_endline[50] = "\n\n";
uint32_t count_cycles_state(bool n) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    count =0;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <count_cycles_state+0x48>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == n) {
 80007dc:	e00b      	b.n	80007f6 <count_cycles_state+0x2a>
        count++;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <count_cycles_state+0x48>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <count_cycles_state+0x48>)
 80007e6:	6013      	str	r3, [r2, #0]
	if(count > 50) {
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <count_cycles_state+0x48>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b32      	cmp	r3, #50	; 0x32
 80007ee:	d902      	bls.n	80007f6 <count_cycles_state+0x2a>
		return count;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <count_cycles_state+0x48>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	e00a      	b.n	800080c <count_cycles_state+0x40>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == n) {
 80007f6:	2120      	movs	r1, #32
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <count_cycles_state+0x4c>)
 80007fa:	f001 fd13 	bl	8002224 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	429a      	cmp	r2, r3
 8000806:	d0ea      	beq.n	80007de <count_cycles_state+0x12>
	}
    }
    return count;
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <count_cycles_state+0x48>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000138 	.word	0x20000138
 8000818:	40010800 	.word	0x40010800

0800081c <Read_DHT11>:
void Read_DHT11(uint32_t* arr,uint8_t* data) {
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08d      	sub	sp, #52	; 0x34
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800083c:	2320      	movs	r3, #32
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4619      	mov	r1, r3
 800084a:	4872      	ldr	r0, [pc, #456]	; (8000a14 <Read_DHT11+0x1f8>)
 800084c:	f001 fb66 	bl	8001f1c <HAL_GPIO_Init>

  HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 ff0b 	bl	800166c <HAL_Delay>


  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800085e:	2320      	movs	r3, #32
 8000860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4869      	ldr	r0, [pc, #420]	; (8000a14 <Read_DHT11+0x1f8>)
 800086e:	f001 fb55 	bl	8001f1c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4867      	ldr	r0, [pc, #412]	; (8000a14 <Read_DHT11+0x1f8>)
 8000878:	f001 fceb 	bl	8002252 <HAL_GPIO_WritePin>

  HAL_Delay(20);
 800087c:	2014      	movs	r0, #20
 800087e:	f000 fef5 	bl	800166c <HAL_Delay>

  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000882:	2301      	movs	r3, #1
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800088a:	2320      	movs	r3, #32
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	485e      	ldr	r0, [pc, #376]	; (8000a14 <Read_DHT11+0x1f8>)
 800089a:	f001 fb3f 	bl	8001f1c <HAL_GPIO_Init>
  for(int i=0;i< 160;i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008a2:	e003      	b.n	80008ac <Read_DHT11+0x90>
	  __NOP();
 80008a4:	bf00      	nop
  for(int i=0;i< 160;i++) {
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	3301      	adds	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	2b9f      	cmp	r3, #159	; 0x9f
 80008b0:	ddf8      	ble.n	80008a4 <Read_DHT11+0x88>
  }
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 80008b2:	bf00      	nop
 80008b4:	2120      	movs	r1, #32
 80008b6:	4857      	ldr	r0, [pc, #348]	; (8000a14 <Read_DHT11+0x1f8>)
 80008b8:	f001 fcb4 	bl	8002224 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <Read_DHT11+0x98>
  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1);
 80008c2:	bf00      	nop
 80008c4:	2120      	movs	r1, #32
 80008c6:	4853      	ldr	r0, [pc, #332]	; (8000a14 <Read_DHT11+0x1f8>)
 80008c8:	f001 fcac 	bl	8002224 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d0f8      	beq.n	80008c4 <Read_DHT11+0xa8>

  for(int i=0; i< 100 ; i+=2) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008d6:	e027      	b.n	8000928 <Read_DHT11+0x10c>
	  count_cycles[i] = count_cycles_state(0);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ff77 	bl	80007cc <count_cycles_state>
 80008de:	4602      	mov	r2, r0
 80008e0:	494d      	ldr	r1, [pc, #308]	; (8000a18 <Read_DHT11+0x1fc>)
 80008e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  count_cycles[i+1] = count_cycles_state(1);
 80008e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ea:	1c5c      	adds	r4, r3, #1
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff6d 	bl	80007cc <count_cycles_state>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a48      	ldr	r2, [pc, #288]	; (8000a18 <Read_DHT11+0x1fc>)
 80008f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  arr[i] = count_cycles[i];
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4945      	ldr	r1, [pc, #276]	; (8000a18 <Read_DHT11+0x1fc>)
 8000904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000906:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800090a:	601a      	str	r2, [r3, #0]
	  arr[i+1] = count_cycles[i+1];
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000912:	3301      	adds	r3, #1
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	440b      	add	r3, r1
 800091a:	493f      	ldr	r1, [pc, #252]	; (8000a18 <Read_DHT11+0x1fc>)
 800091c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000920:	601a      	str	r2, [r3, #0]
  for(int i=0; i< 100 ; i+=2) {
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	3302      	adds	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	2b63      	cmp	r3, #99	; 0x63
 800092c:	ddd4      	ble.n	80008d8 <Read_DHT11+0xbc>
  }

  data[1] = 0x00;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
  data[2] = 0x00;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  data[3] = 0x00;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3303      	adds	r3, #3
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
  data[4] = 0x00;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3304      	adds	r3, #4
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 40; ++i) {
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
 8000952:	e03d      	b.n	80009d0 <Read_DHT11+0x1b4>
	  uint32_t lowCycles = arr[2 * i];
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	61fb      	str	r3, [r7, #28]
	  uint32_t highCycles = arr[2 * i + 1];
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	3304      	adds	r3, #4
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	61bb      	str	r3, [r7, #24]
	  if ((lowCycles >= CYCLE_MAX) || (highCycles >= CYCLE_MAX)) {
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	2b31      	cmp	r3, #49	; 0x31
 8000972:	d802      	bhi.n	800097a <Read_DHT11+0x15e>
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b31      	cmp	r3, #49	; 0x31
 8000978:	d904      	bls.n	8000984 <Read_DHT11+0x168>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <Read_DHT11+0x200>)
 8000980:	f001 fc7f 	bl	8002282 <HAL_GPIO_TogglePin>
	  }
	  data[i / 8] <<= 1;
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	2b00      	cmp	r3, #0
 8000988:	da00      	bge.n	800098c <Read_DHT11+0x170>
 800098a:	3307      	adds	r3, #7
 800098c:	10db      	asrs	r3, r3, #3
 800098e:	4619      	mov	r1, r3
 8000990:	460a      	mov	r2, r1
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	440b      	add	r3, r1
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	701a      	strb	r2, [r3, #0]
	  if (highCycles > lowCycles) {
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d90f      	bls.n	80009ca <Read_DHT11+0x1ae>
		  data[i / 8] |= 1;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da00      	bge.n	80009b2 <Read_DHT11+0x196>
 80009b0:	3307      	adds	r3, #7
 80009b2:	10db      	asrs	r3, r3, #3
 80009b4:	4619      	mov	r1, r3
 80009b6:	460a      	mov	r2, r1
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	440b      	add	r3, r1
 80009c2:	f042 0201 	orr.w	r2, r2, #1
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 40; ++i) {
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	3301      	adds	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	2b27      	cmp	r3, #39	; 0x27
 80009d4:	ddbe      	ble.n	8000954 <Read_DHT11+0x138>
	  }

  }
  uint8_t check_sum = ( data[0]+ data[1]+ data[2]+ data[3] ) & 0xFF;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3302      	adds	r3, #2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3303      	adds	r3, #3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if(check_sum == data[4]) {
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	3304      	adds	r3, #4
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d000      	beq.n	8000a0a <Read_DHT11+0x1ee>

  }else {
	  while(1);
 8000a08:	e7fe      	b.n	8000a08 <Read_DHT11+0x1ec>
  }



}
 8000a0a:	bf00      	nop
 8000a0c:	3734      	adds	r7, #52	; 0x34
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010800 	.word	0x40010800
 8000a18:	2000013c 	.word	0x2000013c
 8000a1c:	40011000 	.word	0x40011000

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	f5ad 6dfc 	sub.w	sp, sp, #2016	; 0x7e0
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buffer[20]= "gia tri ADC la:";
 8000a28:	4bcd      	ldr	r3, [pc, #820]	; (8000d60 <main+0x340>)
 8000a2a:	f207 74ac 	addw	r4, r7, #1964	; 0x7ac
 8000a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
	char chuoi_n[50];
	uint8_t chuoi_ret[1000];
	uint8_t chuoi_met[50];
	uint8_t chuoi1[20];
	uint8_t chuoi1_t[20];
	uint8_t stt[20]= "\n\n\n\n";
 8000a3a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000a3e:	f2a3 42d4 	subw	r2, r3, #1236	; 0x4d4
 8000a42:	49c8      	ldr	r1, [pc, #800]	; (8000d64 <main+0x344>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	c903      	ldmia	r1, {r0, r1}
 8000a48:	6018      	str	r0, [r3, #0]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	7019      	strb	r1, [r3, #0]
 8000a4e:	1d53      	adds	r3, r2, #5
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	f8c3 200b 	str.w	r2, [r3, #11]
	uint32_t var_adc =0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a62:	f000 fda1 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a66:	f000 fab3 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6a:	f000 fbc3 	bl	80011f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a6e:	f000 fb97 	bl	80011a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a72:	f000 fb45 	bl	8001100 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000a76:	f000 fb05 	bl	8001084 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000a7a:	48bb      	ldr	r0, [pc, #748]	; (8000d68 <main+0x348>)
 8000a7c:	f000 fef2 	bl	8001864 <HAL_ADC_Start>
	  HAL_Delay(50);
 8000a80:	2032      	movs	r0, #50	; 0x32
 8000a82:	f000 fdf3 	bl	800166c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, buffer,strlen((const char*)buffer),10);
 8000a86:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fb60 	bl	8000150 <strlen>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f207 71ac 	addw	r1, r7, #1964	; 0x7ac
 8000a98:	230a      	movs	r3, #10
 8000a9a:	48b4      	ldr	r0, [pc, #720]	; (8000d6c <main+0x34c>)
 8000a9c:	f002 fcca 	bl	8003434 <HAL_UART_Transmit>
	  HAL_Delay(5000);
 8000aa0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aa4:	f000 fde2 	bl	800166c <HAL_Delay>
	  Read_DHT11(arr,data); // đ�?c dht11
 8000aa8:	49b1      	ldr	r1, [pc, #708]	; (8000d70 <main+0x350>)
 8000aaa:	48b2      	ldr	r0, [pc, #712]	; (8000d74 <main+0x354>)
 8000aac:	f7ff feb6 	bl	800081c <Read_DHT11>
	  float temp = data[2] + data[3]*0.1;
 8000ab0:	4baf      	ldr	r3, [pc, #700]	; (8000d70 <main+0x350>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fdcf 	bl	8000658 <__aeabi_i2d>
 8000aba:	4604      	mov	r4, r0
 8000abc:	460d      	mov	r5, r1
 8000abe:	4bac      	ldr	r3, [pc, #688]	; (8000d70 <main+0x350>)
 8000ac0:	78db      	ldrb	r3, [r3, #3]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fdc8 	bl	8000658 <__aeabi_i2d>
 8000ac8:	a3a3      	add	r3, pc, #652	; (adr r3, 8000d58 <main+0x338>)
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	f7ff fb47 	bl	8000160 <__aeabi_dmul>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	4629      	mov	r1, r5
 8000ada:	f7ff fc71 	bl	80003c0 <__adddf3>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f7ff fe21 	bl	800072c <__aeabi_d2f>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
	  float humi = data[0] + data[1]*0.1;
 8000af0:	4b9f      	ldr	r3, [pc, #636]	; (8000d70 <main+0x350>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fdaf 	bl	8000658 <__aeabi_i2d>
 8000afa:	4604      	mov	r4, r0
 8000afc:	460d      	mov	r5, r1
 8000afe:	4b9c      	ldr	r3, [pc, #624]	; (8000d70 <main+0x350>)
 8000b00:	785b      	ldrb	r3, [r3, #1]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fda8 	bl	8000658 <__aeabi_i2d>
 8000b08:	a393      	add	r3, pc, #588	; (adr r3, 8000d58 <main+0x338>)
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	f7ff fb27 	bl	8000160 <__aeabi_dmul>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	4620      	mov	r0, r4
 8000b18:	4629      	mov	r1, r5
 8000b1a:	f7ff fc51 	bl	80003c0 <__adddf3>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	4610      	mov	r0, r2
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff fe01 	bl	800072c <__aeabi_d2f>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
	  int a =data[2];
 8000b30:	4b8f      	ldr	r3, [pc, #572]	; (8000d70 <main+0x350>)
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
	  int b =data[3];
 8000b38:	4b8d      	ldr	r3, [pc, #564]	; (8000d70 <main+0x350>)
 8000b3a:	78db      	ldrb	r3, [r3, #3]
 8000b3c:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
	  int c =data[0];
 8000b40:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <main+0x350>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
	  int d =data[1];
 8000b48:	4b89      	ldr	r3, [pc, #548]	; (8000d70 <main+0x350>)
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
	  char tx_humi[100];
	  char tx[100];
	  char space[]  = " ";
 8000b50:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000b54:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8000b58:	2220      	movs	r2, #32
 8000b5a:	801a      	strh	r2, [r3, #0]
	  char end[] = "\r\n";
 8000b5c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000b60:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8000b64:	4a84      	ldr	r2, [pc, #528]	; (8000d78 <main+0x358>)
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	8019      	strh	r1, [r3, #0]
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	0c12      	lsrs	r2, r2, #16
 8000b70:	701a      	strb	r2, [r3, #0]
	  char total[300];
	  sprintf(tx_humi, "%d.%d", a, b);
 8000b72:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000b76:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8000b7a:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 8000b7e:	497f      	ldr	r1, [pc, #508]	; (8000d7c <main+0x35c>)
 8000b80:	f002 fdd8 	bl	8003734 <siprintf>
	  sprintf(tx, "%d.%d", c, d);
 8000b84:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000b88:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8000b8c:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 8000b90:	497a      	ldr	r1, [pc, #488]	; (8000d7c <main+0x35c>)
 8000b92:	f002 fdcf 	bl	8003734 <siprintf>
	  var_adc = HAL_ADC_GetValue(&hadc1);   // đ�?c adc quang trở
 8000b96:	4874      	ldr	r0, [pc, #464]	; (8000d68 <main+0x348>)
 8000b98:	f000 ff12 	bl	80019c0 <HAL_ADC_GetValue>
 8000b9c:	f8c7 07d8 	str.w	r0, [r7, #2008]	; 0x7d8
	  sprintf(buffer_adc, "%ld", var_adc);
 8000ba0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8000ba4:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8000ba8:	4975      	ldr	r1, [pc, #468]	; (8000d80 <main+0x360>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fdc2 	bl	8003734 <siprintf>
	  strcat(total,tx_humi);
 8000bb0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fde2 	bl	8003784 <strcat>
	  strcat(total,space);
 8000bc0:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8000bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fdda 	bl	8003784 <strcat>
	  strcat(total,tx);
 8000bd0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fdd2 	bl	8003784 <strcat>
	  strcat(total,space);
 8000be0:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8000be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fdca 	bl	8003784 <strcat>
	  strcat(total,buffer_adc);
 8000bf0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8000bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 fdc2 	bl	8003784 <strcat>
	  strcat(total,end);
 8000c00:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8000c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fdba 	bl	8003784 <strcat>
//	  HAL_UART_Transmit(&huart1, total, strlen(total), 10);



	  HAL_Delay(3000);
 8000c10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c14:	f000 fd2a 	bl	800166c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	4859      	ldr	r0, [pc, #356]	; (8000d84 <main+0x364>)
 8000c1e:	f001 fb30 	bl	8002282 <HAL_GPIO_TogglePin>
	  unsigned char data[] = "AT\r\n";
 8000c22:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000c26:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <main+0x368>)
 8000c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c30:	6018      	str	r0, [r3, #0]
 8000c32:	3304      	adds	r3, #4
 8000c34:	7019      	strb	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1, data, strlen(data), 10);
 8000c36:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fa88 	bl	8000150 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8000c48:	230a      	movs	r3, #10
 8000c4a:	4848      	ldr	r0, [pc, #288]	; (8000d6c <main+0x34c>)
 8000c4c:	f002 fbf2 	bl	8003434 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f000 fd0a 	bl	800166c <HAL_Delay>
	  unsigned char data1[] = "AT+CMQTTSTART\r\n";
 8000c58:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000c5c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8000c60:	4a4a      	ldr	r2, [pc, #296]	; (8000d8c <main+0x36c>)
 8000c62:	461c      	mov	r4, r3
 8000c64:	4613      	mov	r3, r2
 8000c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart1, data1, strlen(data1), 10);
 8000c6c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fa6d 	bl	8000150 <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 8000c7e:	230a      	movs	r3, #10
 8000c80:	483a      	ldr	r0, [pc, #232]	; (8000d6c <main+0x34c>)
 8000c82:	f002 fbd7 	bl	8003434 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8a:	f000 fcef 	bl	800166c <HAL_Delay>

	  unsigned char data2[] = "AT+CMQTTACCQ=0,\"clientID\"\r\n";
 8000c8e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000c92:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8000c96:	4a3e      	ldr	r2, [pc, #248]	; (8000d90 <main+0x370>)
 8000c98:	461c      	mov	r4, r3
 8000c9a:	4615      	mov	r5, r2
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1, data2, strlen(data2), 10);
 8000ca8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa4f 	bl	8000150 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8000cba:	230a      	movs	r3, #10
 8000cbc:	482b      	ldr	r0, [pc, #172]	; (8000d6c <main+0x34c>)
 8000cbe:	f002 fbb9 	bl	8003434 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc6:	f000 fcd1 	bl	800166c <HAL_Delay>


	  while(1) {
		  Read_DHT11(arr,data);
 8000cca:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4828      	ldr	r0, [pc, #160]	; (8000d74 <main+0x354>)
 8000cd2:	f7ff fda3 	bl	800081c <Read_DHT11>
		  a =data[2];
 8000cd6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000cda:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8000cde:	789b      	ldrb	r3, [r3, #2]
 8000ce0:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
		  b =data[3];
 8000ce4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000ce8:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8000cec:	78db      	ldrb	r3, [r3, #3]
 8000cee:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
		  c =data[0];
 8000cf2:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000cf6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
		  d =data[1];
 8000d00:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000d04:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
		  sprintf(tx_humi, "%d.%d", a, b);
 8000d0e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000d12:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8000d16:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 8000d1a:	4918      	ldr	r1, [pc, #96]	; (8000d7c <main+0x35c>)
 8000d1c:	f002 fd0a 	bl	8003734 <siprintf>
		  sprintf(tx, "%d.%d", c, d);
 8000d20:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000d24:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8000d28:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 8000d2c:	4913      	ldr	r1, [pc, #76]	; (8000d7c <main+0x35c>)
 8000d2e:	f002 fd01 	bl	8003734 <siprintf>
		  var_adc = HAL_ADC_GetValue(&hadc1);   // đ�?c adc quang trở
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <main+0x348>)
 8000d34:	f000 fe44 	bl	80019c0 <HAL_ADC_GetValue>
 8000d38:	f8c7 07d8 	str.w	r0, [r7, #2008]	; 0x7d8
		  sprintf(buffer_adc, "%ld", var_adc);
 8000d3c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8000d40:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8000d44:	490e      	ldr	r1, [pc, #56]	; (8000d80 <main+0x360>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fcf4 	bl	8003734 <siprintf>
		  for(int i=0;i<300;i++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8000d52:	e02d      	b.n	8000db0 <main+0x390>
 8000d54:	f3af 8000 	nop.w
 8000d58:	9999999a 	.word	0x9999999a
 8000d5c:	3fb99999 	.word	0x3fb99999
 8000d60:	080040dc 	.word	0x080040dc
 8000d64:	080040f0 	.word	0x080040f0
 8000d68:	20000078 	.word	0x20000078
 8000d6c:	200000f0 	.word	0x200000f0
 8000d70:	2000045c 	.word	0x2000045c
 8000d74:	200002cc 	.word	0x200002cc
 8000d78:	08004104 	.word	0x08004104
 8000d7c:	080040d0 	.word	0x080040d0
 8000d80:	080040d8 	.word	0x080040d8
 8000d84:	40011000 	.word	0x40011000
 8000d88:	08004108 	.word	0x08004108
 8000d8c:	08004110 	.word	0x08004110
 8000d90:	08004120 	.word	0x08004120
			  total[i] =0;
 8000d94:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000d98:	f5a3 62db 	sub.w	r2, r3, #1752	; 0x6d8
 8000d9c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8000da0:	4413      	add	r3, r2
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<300;i++) {
 8000da6:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8000daa:	3301      	adds	r3, #1
 8000dac:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8000db0:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8000db4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000db8:	dbec      	blt.n	8000d94 <main+0x374>
		  }
		  strcat(total,tx_humi);
 8000dba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fcdd 	bl	8003784 <strcat>
		  strcat(total,space);
 8000dca:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8000dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fcd5 	bl	8003784 <strcat>
		  strcat(total,tx);
 8000dda:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fccd 	bl	8003784 <strcat>
		  strcat(total,space);
 8000dea:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8000dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 fcc5 	bl	8003784 <strcat>
		  strcat(total,buffer_adc);
 8000dfa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8000dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fcbd 	bl	8003784 <strcat>
		  strcat(total,end);
 8000e0a:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8000e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fcb5 	bl	8003784 <strcat>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1e:	4864      	ldr	r0, [pc, #400]	; (8000fb0 <main+0x590>)
 8000e20:	f001 fa2f 	bl	8002282 <HAL_GPIO_TogglePin>
		  unsigned char data3[] = "AT+CMQTTCONNECT=0,\"tcp://test.mosquitto.org:1883\",60,0\r\n";
 8000e24:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000e28:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8000e2c:	4a61      	ldr	r2, [pc, #388]	; (8000fb4 <main+0x594>)
 8000e2e:	461c      	mov	r4, r3
 8000e30:	4615      	mov	r5, r2
 8000e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e42:	c403      	stmia	r4!, {r0, r1}
 8000e44:	7022      	strb	r2, [r4, #0]
		  HAL_UART_Transmit(&huart1, data3, strlen(data3), 10);
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff f981 	bl	8000150 <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	1d39      	adds	r1, r7, #4
 8000e54:	230a      	movs	r3, #10
 8000e56:	4858      	ldr	r0, [pc, #352]	; (8000fb8 <main+0x598>)
 8000e58:	f002 faec 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e60:	f000 fc04 	bl	800166c <HAL_Delay>

		  unsigned char data4[] = "AT+CMQTTTOPIC=0,5\r\n";
 8000e64:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000e68:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8000e6c:	4a53      	ldr	r2, [pc, #332]	; (8000fbc <main+0x59c>)
 8000e6e:	461c      	mov	r4, r3
 8000e70:	4615      	mov	r5, r2
 8000e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	6023      	str	r3, [r4, #0]
		  HAL_UART_Transmit(&huart1, data4, strlen(data4), 10);
 8000e7a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f966 	bl	8000150 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	484a      	ldr	r0, [pc, #296]	; (8000fb8 <main+0x598>)
 8000e90:	f002 fad0 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(10);
 8000e94:	200a      	movs	r0, #10
 8000e96:	f000 fbe9 	bl	800166c <HAL_Delay>

		  unsigned char data5[] = "vonam\r\n";
 8000e9a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000e9e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8000ea2:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <main+0x5a0>)
 8000ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea8:	e883 0003 	stmia.w	r3, {r0, r1}
		  HAL_UART_Transmit(&huart1, data5, strlen(data5), 10);
 8000eac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff f94d 	bl	8000150 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f507 7120 	add.w	r1, r7, #640	; 0x280
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	483d      	ldr	r0, [pc, #244]	; (8000fb8 <main+0x598>)
 8000ec2:	f002 fab7 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eca:	f000 fbcf 	bl	800166c <HAL_Delay>

		  unsigned char data6[] = "AT+CMQTTPAYLOAD=0,14\r\n";
 8000ece:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000ed2:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 8000ed6:	4a3b      	ldr	r2, [pc, #236]	; (8000fc4 <main+0x5a4>)
 8000ed8:	461c      	mov	r4, r3
 8000eda:	4615      	mov	r5, r2
 8000edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee4:	6020      	str	r0, [r4, #0]
 8000ee6:	3404      	adds	r4, #4
 8000ee8:	8021      	strh	r1, [r4, #0]
 8000eea:	3402      	adds	r4, #2
 8000eec:	0c0b      	lsrs	r3, r1, #16
 8000eee:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart1, data6, strlen(data6), 10);
 8000ef0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f92b 	bl	8000150 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8000f02:	230a      	movs	r3, #10
 8000f04:	482c      	ldr	r0, [pc, #176]	; (8000fb8 <main+0x598>)
 8000f06:	f002 fa95 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f000 fbae 	bl	800166c <HAL_Delay>

		  HAL_UART_Transmit(&huart1, total, strlen(total), 500);
 8000f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f91b 	bl	8000150 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000f22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f26:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <main+0x598>)
 8000f28:	f002 fa84 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f30:	f000 fb9c 	bl	800166c <HAL_Delay>

		  unsigned char data8[] = "AT+CMQTTPUB=0,1,60,0,0\r\n";
 8000f34:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000f38:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8000f3c:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <main+0x5a8>)
 8000f3e:	461c      	mov	r4, r3
 8000f40:	4615      	mov	r5, r2
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4a:	c403      	stmia	r4!, {r0, r1}
 8000f4c:	7022      	strb	r2, [r4, #0]
		  HAL_UART_Transmit(&huart1, data8, strlen(data8), 10);
 8000f4e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f8fc 	bl	8000150 <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8000f60:	230a      	movs	r3, #10
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <main+0x598>)
 8000f64:	f002 fa66 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6c:	f000 fb7e 	bl	800166c <HAL_Delay>

		  unsigned char data9[] = "AT+CMQTTDISC=0,123\r\n";
 8000f70:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000f74:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <main+0x5ac>)
 8000f7a:	461c      	mov	r4, r3
 8000f7c:	4615      	mov	r5, r2
 8000f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f86:	6020      	str	r0, [r4, #0]
 8000f88:	3404      	adds	r4, #4
 8000f8a:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart1, data9, strlen(data9), 10);
 8000f8c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f8dd 	bl	8000150 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <main+0x598>)
 8000fa2:	f002 fa47 	bl	8003434 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000faa:	f000 fb5f 	bl	800166c <HAL_Delay>
	  while(1) {
 8000fae:	e68c      	b.n	8000cca <main+0x2aa>
 8000fb0:	40011000 	.word	0x40011000
 8000fb4:	0800413c 	.word	0x0800413c
 8000fb8:	200000f0 	.word	0x200000f0
 8000fbc:	08004178 	.word	0x08004178
 8000fc0:	0800418c 	.word	0x0800418c
 8000fc4:	08004194 	.word	0x08004194
 8000fc8:	080041ac 	.word	0x080041ac
 8000fcc:	080041c8 	.word	0x080041c8

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fda:	2228      	movs	r2, #40	; 0x28
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fbc8 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001000:	2301      	movs	r3, #1
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100e:	2301      	movs	r3, #1
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800101c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f944 	bl	80022b4 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001032:	f000 f94f 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fbb1 	bl	80027b8 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800105c:	f000 f93a 	bl	80012d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001060:	2302      	movs	r3, #2
 8001062:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001068:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fd31 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001078:	f000 f92c 	bl	80012d4 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3750      	adds	r7, #80	; 0x50
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_ADC1_Init+0x74>)
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <MX_ADC1_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_ADC1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010bc:	2201      	movs	r2, #1
 80010be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010c2:	f000 faf7 	bl	80016b4 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f902 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010d0:	2306      	movs	r3, #6
 80010d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_ADC1_Init+0x74>)
 80010e2:	f000 fc79 	bl	80019d8 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010ec:	f000 f8f2 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000078 	.word	0x20000078
 80010fc:	40012400 	.word	0x40012400

08001100 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM1_Init+0x98>)
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <MX_TIM1_Init+0x9c>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM1_Init+0x98>)
 8001124:	221f      	movs	r2, #31
 8001126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM1_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65000;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_TIM1_Init+0x98>)
 8001130:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM1_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM1_Init+0x98>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM1_Init+0x98>)
 800114a:	f001 fd79 	bl	8002c40 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001154:	f000 f8be 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM1_Init+0x98>)
 8001166:	f001 fec2 	bl	8002eee <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001170:	f000 f8b0 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM1_Init+0x98>)
 8001182:	f002 f897 	bl	80032b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800118c:	f000 f8a2 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000a8 	.word	0x200000a8
 800119c:	40012c00 	.word	0x40012c00

080011a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_USART1_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART1_UART_Init+0x4c>)
 80011d8:	f002 f8dc 	bl	8003394 <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f000 f877 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000f0 	.word	0x200000f0
 80011f0:	40013800 	.word	0x40013800

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb4>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xb4>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xb4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_GPIO_Init+0xb4>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xb4>)
 8001226:	f043 0320 	orr.w	r3, r3, #32
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_GPIO_Init+0xb4>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_GPIO_Init+0xb4>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_GPIO_Init+0xb4>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xb4>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001256:	4815      	ldr	r0, [pc, #84]	; (80012ac <MX_GPIO_Init+0xb8>)
 8001258:	f000 fffb 	bl	8002252 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2120      	movs	r1, #32
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_GPIO_Init+0xbc>)
 8001262:	f000 fff6 	bl	8002252 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_GPIO_Init+0xb8>)
 8001280:	f000 fe4c 	bl	8001f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001284:	2320      	movs	r3, #32
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_GPIO_Init+0xbc>)
 800129c:	f000 fe3e 	bl	8001f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40010800 	.word	0x40010800

080012b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80012c2:	f000 ffde 	bl	8002282 <HAL_GPIO_TogglePin>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40011000 	.word	0x40011000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_MspInit+0x40>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_MspInit+0x40>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_MspInit+0x40>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_MspInit+0x40>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_MspInit+0x40>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_MspInit+0x40>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_ADC_MspInit+0x6c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d121      	bne.n	8001388 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_ADC_MspInit+0x70>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_ADC_MspInit+0x70>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_ADC_MspInit+0x70>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_ADC_MspInit+0x70>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_ADC_MspInit+0x70>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_ADC_MspInit+0x70>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001374:	2340      	movs	r3, #64	; 0x40
 8001376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001378:	2303      	movs	r3, #3
 800137a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_ADC_MspInit+0x74>)
 8001384:	f000 fdca 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40012400 	.word	0x40012400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d113      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b8:	6193      	str	r3, [r2, #24]
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_TIM_Base_MspInit+0x48>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2019      	movs	r0, #25
 80013cc:	f000 fd6f 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013d0:	2019      	movs	r0, #25
 80013d2:	f000 fd88 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40012c00 	.word	0x40012c00
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_UART_MspInit+0x8c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d131      	bne.n	800146c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_UART_MspInit+0x90>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_UART_MspInit+0x90>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x90>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_UART_MspInit+0x90>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4619      	mov	r1, r3
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <HAL_UART_MspInit+0x94>)
 800144e:	f000 fd65 	bl	8001f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_UART_MspInit+0x94>)
 8001468:	f000 fd58 	bl	8001f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013800 	.word	0x40013800
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f8b5 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM1_UP_IRQHandler+0x10>)
 80014d6:	f001 fc02 	bl	8002cde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000a8 	.word	0x200000a8

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f002 f946 	bl	80037a4 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20005000 	.word	0x20005000
 8001544:	00000400 	.word	0x00000400
 8001548:	20000460 	.word	0x20000460
 800154c:	200005b0 	.word	0x200005b0

08001550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155c:	f7ff fff8 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001562:	490c      	ldr	r1, [pc, #48]	; (8001594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001578:	4c09      	ldr	r4, [pc, #36]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f002 f913 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158a:	f7ff fa49 	bl	8000a20 <main>
  bx lr
 800158e:	4770      	bx	lr
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001598:	08004248 	.word	0x08004248
  ldr r2, =_sbss
 800159c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015a0:	200005b0 	.word	0x200005b0

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 fc6d 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fe8c 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fc85 	bl	8001f02 <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 fc4d 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000008 	.word	0x20000008
 8001654:	20000464 	.word	0x20000464

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000464 	.word	0x20000464

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff fff0 	bl	8001658 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffe0 	bl	8001658 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008

080016b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0be      	b.n	8001854 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fe16 	bl	8001324 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fabf 	bl	8001c7c <ADC_ConversionStop_Disable>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 8099 	bne.w	8001842 <HAL_ADC_Init+0x18e>
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 8095 	bne.w	8001842 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001720:	f023 0302 	bic.w	r3, r3, #2
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001734:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7b1b      	ldrb	r3, [r3, #12]
 800173a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800173c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4313      	orrs	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800174c:	d003      	beq.n	8001756 <HAL_ADC_Init+0xa2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d102      	bne.n	800175c <HAL_ADC_Init+0xa8>
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	e000      	b.n	800175e <HAL_ADC_Init+0xaa>
 800175c:	2300      	movs	r3, #0
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7d1b      	ldrb	r3, [r3, #20]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d119      	bne.n	80017a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7b1b      	ldrb	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	3b01      	subs	r3, #1
 800177a:	035a      	lsls	r2, r3, #13
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e00b      	b.n	80017a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f043 0220 	orr.w	r2, r3, #32
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_ADC_Init+0x1a8>)
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d0:	d003      	beq.n	80017da <HAL_ADC_Init+0x126>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d104      	bne.n	80017e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	3b01      	subs	r3, #1
 80017e0:	051b      	lsls	r3, r3, #20
 80017e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_ADC_Init+0x1ac>)
 8001800:	4013      	ands	r3, r2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800181e:	e018      	b.n	8001852 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f023 0312 	bic.w	r3, r3, #18
 8001828:	f043 0210 	orr.w	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001840:	e007      	b.n	8001852 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001852:	7dfb      	ldrb	r3, [r7, #23]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	ffe1f7fd 	.word	0xffe1f7fd
 8001860:	ff1f0efe 	.word	0xff1f0efe

08001864 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_Start+0x1a>
 800187a:	2302      	movs	r3, #2
 800187c:	e098      	b.n	80019b0 <HAL_ADC_Start+0x14c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f99e 	bl	8001bc8 <ADC_Enable>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8087 	bne.w	80019a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <HAL_ADC_Start+0x154>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_Start+0x5e>
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_ADC_Start+0x158>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d115      	bne.n	80018ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d026      	beq.n	800192a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018ec:	e01d      	b.n	800192a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <HAL_ADC_Start+0x158>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d004      	beq.n	800190e <HAL_ADC_Start+0xaa>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_ADC_Start+0x154>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10d      	bne.n	800192a <HAL_ADC_Start+0xc6>
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_ADC_Start+0x158>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001922:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	f023 0206 	bic.w	r2, r3, #6
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
 8001942:	e002      	b.n	800194a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0202 	mvn.w	r2, #2
 800195a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001966:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800196a:	d113      	bne.n	8001994 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_ADC_Start+0x154>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d105      	bne.n	8001982 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_ADC_Start+0x158>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	e00c      	b.n	80019ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e003      	b.n	80019ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40012800 	.word	0x40012800
 80019bc:	40012400 	.word	0x40012400

080019c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x20>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e0dc      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x1da>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d81c      	bhi.n	8001a42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	3b05      	subs	r3, #5
 8001a1a:	221f      	movs	r2, #31
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4019      	ands	r1, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	3b05      	subs	r3, #5
 8001a34:	fa00 f203 	lsl.w	r2, r0, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a40:	e03c      	b.n	8001abc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d81c      	bhi.n	8001a84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b23      	subs	r3, #35	; 0x23
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4019      	ands	r1, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b23      	subs	r3, #35	; 0x23
 8001a76:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
 8001a82:	e01b      	b.n	8001abc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b41      	subs	r3, #65	; 0x41
 8001a96:	221f      	movs	r2, #31
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4019      	ands	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b41      	subs	r3, #65	; 0x41
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	d91c      	bls.n	8001afe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68d9      	ldr	r1, [r3, #12]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b1e      	subs	r3, #30
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4019      	ands	r1, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6898      	ldr	r0, [r3, #8]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	3b1e      	subs	r3, #30
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	e019      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6919      	ldr	r1, [r3, #16]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6898      	ldr	r0, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d003      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b3e:	2b11      	cmp	r3, #17
 8001b40:	d132      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <HAL_ADC_ConfigChannel+0x1e4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d125      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d126      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d11a      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	0c9a      	lsrs	r2, r3, #18
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x1b2>
 8001b96:	e007      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f043 0220 	orr.w	r2, r3, #32
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40012400 	.word	0x40012400
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83

08001bc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d040      	beq.n	8001c68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <ADC_Enable+0xac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <ADC_Enable+0xb0>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9b      	lsrs	r3, r3, #18
 8001c02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c04:	e002      	b.n	8001c0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c12:	f7ff fd21 	bl	8001658 <HAL_GetTick>
 8001c16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c18:	e01f      	b.n	8001c5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c1a:	f7ff fd1d 	bl	8001658 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d918      	bls.n	8001c5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d011      	beq.n	8001c5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e007      	b.n	8001c6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d1d8      	bne.n	8001c1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d12e      	bne.n	8001cf4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ca6:	f7ff fcd7 	bl	8001658 <HAL_GetTick>
 8001caa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cac:	e01b      	b.n	8001ce6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cae:	f7ff fcd3 	bl	8001658 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d914      	bls.n	8001ce6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10d      	bne.n	8001ce6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e007      	b.n	8001cf6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d0dc      	beq.n	8001cae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4906      	ldr	r1, [pc, #24]	; (8001d98 <__NVIC_EnableIRQ+0x34>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff90 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff2d 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff42 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff90 	bl	8001df0 <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5f 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff35 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffa2 	bl	8001e54 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2e:	e169      	b.n	8002204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f30:	2201      	movs	r2, #1
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8158 	bne.w	80021fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a9a      	ldr	r2, [pc, #616]	; (80021bc <HAL_GPIO_Init+0x2a0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d05e      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f58:	4a98      	ldr	r2, [pc, #608]	; (80021bc <HAL_GPIO_Init+0x2a0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d875      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f5e:	4a98      	ldr	r2, [pc, #608]	; (80021c0 <HAL_GPIO_Init+0x2a4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d058      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f64:	4a96      	ldr	r2, [pc, #600]	; (80021c0 <HAL_GPIO_Init+0x2a4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d86f      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f6a:	4a96      	ldr	r2, [pc, #600]	; (80021c4 <HAL_GPIO_Init+0x2a8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d052      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f70:	4a94      	ldr	r2, [pc, #592]	; (80021c4 <HAL_GPIO_Init+0x2a8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d869      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f76:	4a94      	ldr	r2, [pc, #592]	; (80021c8 <HAL_GPIO_Init+0x2ac>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04c      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f7c:	4a92      	ldr	r2, [pc, #584]	; (80021c8 <HAL_GPIO_Init+0x2ac>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d863      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f82:	4a92      	ldr	r2, [pc, #584]	; (80021cc <HAL_GPIO_Init+0x2b0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d046      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
 8001f88:	4a90      	ldr	r2, [pc, #576]	; (80021cc <HAL_GPIO_Init+0x2b0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d85d      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f8e:	2b12      	cmp	r3, #18
 8001f90:	d82a      	bhi.n	8001fe8 <HAL_GPIO_Init+0xcc>
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d859      	bhi.n	800204a <HAL_GPIO_Init+0x12e>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <HAL_GPIO_Init+0x80>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08002017 	.word	0x08002017
 8001fa0:	08001ff1 	.word	0x08001ff1
 8001fa4:	08002003 	.word	0x08002003
 8001fa8:	08002045 	.word	0x08002045
 8001fac:	0800204b 	.word	0x0800204b
 8001fb0:	0800204b 	.word	0x0800204b
 8001fb4:	0800204b 	.word	0x0800204b
 8001fb8:	0800204b 	.word	0x0800204b
 8001fbc:	0800204b 	.word	0x0800204b
 8001fc0:	0800204b 	.word	0x0800204b
 8001fc4:	0800204b 	.word	0x0800204b
 8001fc8:	0800204b 	.word	0x0800204b
 8001fcc:	0800204b 	.word	0x0800204b
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	0800204b 	.word	0x0800204b
 8001fd8:	0800204b 	.word	0x0800204b
 8001fdc:	0800204b 	.word	0x0800204b
 8001fe0:	08001ff9 	.word	0x08001ff9
 8001fe4:	0800200d 	.word	0x0800200d
 8001fe8:	4a79      	ldr	r2, [pc, #484]	; (80021d0 <HAL_GPIO_Init+0x2b4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fee:	e02c      	b.n	800204a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e029      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e024      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	3308      	adds	r3, #8
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e01f      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	330c      	adds	r3, #12
 8002012:	623b      	str	r3, [r7, #32]
          break;
 8002014:	e01a      	b.n	800204c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800201e:	2304      	movs	r3, #4
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e013      	b.n	800204c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	611a      	str	r2, [r3, #16]
          break;
 8002036:	e009      	b.n	800204c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002038:	2308      	movs	r3, #8
 800203a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	615a      	str	r2, [r3, #20]
          break;
 8002042:	e003      	b.n	800204c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e000      	b.n	800204c <HAL_GPIO_Init+0x130>
          break;
 800204a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d801      	bhi.n	8002056 <HAL_GPIO_Init+0x13a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	e001      	b.n	800205a <HAL_GPIO_Init+0x13e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	; 0xff
 8002060:	d802      	bhi.n	8002068 <HAL_GPIO_Init+0x14c>
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x152>
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3b08      	subs	r3, #8
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	210f      	movs	r1, #15
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	6a39      	ldr	r1, [r7, #32]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80b1 	beq.w	80021fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_GPIO_Init+0x2b8>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x2b8>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x2b8>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020b4:	4a48      	ldr	r2, [pc, #288]	; (80021d8 <HAL_GPIO_Init+0x2bc>)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a40      	ldr	r2, [pc, #256]	; (80021dc <HAL_GPIO_Init+0x2c0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x1ec>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3f      	ldr	r2, [pc, #252]	; (80021e0 <HAL_GPIO_Init+0x2c4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1e8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3e      	ldr	r2, [pc, #248]	; (80021e4 <HAL_GPIO_Init+0x2c8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1e4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3d      	ldr	r2, [pc, #244]	; (80021e8 <HAL_GPIO_Init+0x2cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1e0>
 80020f8:	2303      	movs	r3, #3
 80020fa:	e006      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e004      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002100:	2302      	movs	r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_GPIO_Init+0x1ee>
 8002108:	2300      	movs	r3, #0
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4093      	lsls	r3, r2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211a:	492f      	ldr	r1, [pc, #188]	; (80021d8 <HAL_GPIO_Init+0x2bc>)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	492c      	ldr	r1, [pc, #176]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4928      	ldr	r1, [pc, #160]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4922      	ldr	r1, [pc, #136]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	491e      	ldr	r1, [pc, #120]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4918      	ldr	r1, [pc, #96]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	4914      	ldr	r1, [pc, #80]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d021      	beq.n	80021f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e021      	b.n	80021fe <HAL_GPIO_Init+0x2e2>
 80021ba:	bf00      	nop
 80021bc:	10320000 	.word	0x10320000
 80021c0:	10310000 	.word	0x10310000
 80021c4:	10220000 	.word	0x10220000
 80021c8:	10210000 	.word	0x10210000
 80021cc:	10120000 	.word	0x10120000
 80021d0:	10110000 	.word	0x10110000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40010800 	.word	0x40010800
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40011400 	.word	0x40011400
 80021ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_GPIO_Init+0x304>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4909      	ldr	r1, [pc, #36]	; (8002220 <HAL_GPIO_Init+0x304>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	3301      	adds	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	f47f ae8e 	bne.w	8001f30 <HAL_GPIO_Init+0x14>
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	372c      	adds	r7, #44	; 0x2c
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	807b      	strh	r3, [r7, #2]
 800225e:	4613      	mov	r3, r2
 8002260:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002262:	787b      	ldrb	r3, [r7, #1]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800226e:	e003      	b.n	8002278 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	041a      	lsls	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	611a      	str	r2, [r3, #16]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002294:	887a      	ldrh	r2, [r7, #2]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	041a      	lsls	r2, r3, #16
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43d9      	mvns	r1, r3
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	400b      	ands	r3, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e272      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8087 	beq.w	80023e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d00c      	beq.n	80022fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e0:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d112      	bne.n	8002312 <HAL_RCC_OscConfig+0x5e>
 80022ec:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d10b      	bne.n	8002312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x12c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d168      	bne.n	80023e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e24c      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x76>
 800231c:	4b80      	ldr	r3, [pc, #512]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7f      	ldr	r2, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e02e      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x98>
 8002332:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7a      	ldr	r2, [pc, #488]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b78      	ldr	r3, [pc, #480]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a77      	ldr	r2, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0xbc>
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a71      	ldr	r2, [pc, #452]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 8002370:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff f962 	bl	8001658 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff f95e 	bl	8001658 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e200      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xe4>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff f94e 	bl	8001658 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff f94a 	bl	8001658 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1ec      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x10c>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x18c>
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x176>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1c0      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4939      	ldr	r1, [pc, #228]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7ff f903 	bl	8001658 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff f8ff 	bl	8001658 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1a1      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4927      	ldr	r1, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff f8e2 	bl	8001658 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff f8de 	bl	8001658 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e180      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d03a      	beq.n	8002538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d019      	beq.n	80024fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7ff f8c2 	bl	8001658 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7ff f8be 	bl	8001658 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e160      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f000 face 	bl	8002a98 <RCC_Delay>
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7ff f8a8 	bl	8001658 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250a:	e00f      	b.n	800252c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff f8a4 	bl	8001658 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d908      	bls.n	800252c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e146      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	42420000 	.word	0x42420000
 8002528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e9      	bne.n	800250c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a6 	beq.w	8002692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7e      	ldr	r2, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff f865 	bl	8001658 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7ff f861 	bl	8001658 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e103      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x312>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e02d      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x334>
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a66      	ldr	r2, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	e01c      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x356>
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6213      	str	r3, [r2, #32]
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7ff f815 	bl	8001658 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff f811 	bl	8001658 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0b1      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCC_OscConfig+0x37e>
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe ffff 	bl	8001658 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fffb 	bl	8001658 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e09b      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d061      	beq.n	800276c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d146      	bne.n	800273e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7fe ffcf 	bl	8001658 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe ffcb 	bl	8001658 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e06d      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a19      	ldr	r1, [r3, #32]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	430b      	orrs	r3, r1
 800270a:	491b      	ldr	r1, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe ff9f 	bl	8001658 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe ff9b 	bl	8001658 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e03d      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x46a>
 800273c:	e035      	b.n	80027aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe ff88 	bl	8001658 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe ff84 	bl	8001658 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e026      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x498>
 800276a:	e01e      	b.n	80027aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e019      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_OscConfig+0x500>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0d0      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d910      	bls.n	80027fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 0207 	bic.w	r2, r3, #7
 80027e2:	4965      	ldr	r1, [pc, #404]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0b8      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800281e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800282c:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d040      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d115      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07f      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e073      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06b      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4936      	ldr	r1, [pc, #216]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fed6 	bl	8001658 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe fed2 	bl	8001658 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e053      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d210      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4922      	ldr	r1, [pc, #136]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e032      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4916      	ldr	r1, [pc, #88]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002946:	f000 f821 	bl	800298c <HAL_RCC_GetSysClockFreq>
 800294a:	4602      	mov	r2, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	490a      	ldr	r1, [pc, #40]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	5ccb      	ldrb	r3, [r1, r3]
 800295a:	fa22 f303 	lsr.w	r3, r2, r3
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1cc>)
 8002960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1d0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fe34 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000
 800297c:	40021000 	.word	0x40021000
 8002980:	080041e0 	.word	0x080041e0
 8002984:	20000000 	.word	0x20000000
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x30>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ba:	e027      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80029be:	613b      	str	r3, [r7, #16]
      break;
 80029c0:	e027      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0c5b      	lsrs	r3, r3, #17
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ee:	fb03 f202 	mul.w	r2, r3, r2
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e004      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	613b      	str	r3, [r7, #16]
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	613b      	str	r3, [r7, #16]
      break;
 8002a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a12:	693b      	ldr	r3, [r7, #16]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	007a1200 	.word	0x007a1200
 8002a28:	080041f8 	.word	0x080041f8
 8002a2c:	08004208 	.word	0x08004208
 8002a30:	003d0900 	.word	0x003d0900

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff2 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	080041f0 	.word	0x080041f0

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffde 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0adb      	lsrs	r3, r3, #11
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	080041f0 	.word	0x080041f0

08002a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCC_Delay+0x34>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <RCC_Delay+0x38>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a5b      	lsrs	r3, r3, #9
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab4:	bf00      	nop
  }
  while (Delay --);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	60fa      	str	r2, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f9      	bne.n	8002ab4 <RCC_Delay+0x1c>
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	10624dd3 	.word	0x10624dd3

08002ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d07d      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af4:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	61d3      	str	r3, [r2, #28]
 8002b0c:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d118      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b34:	f7fe fd90 	bl	8001658 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	e008      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3c:	f7fe fd8c 	bl	8001658 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e06d      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02e      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d027      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b78:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b88:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b8e:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d014      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fd5b 	bl	8001658 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fd57 	bl	8001658 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e036      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ee      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4917      	ldr	r1, [pc, #92]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d105      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	490b      	ldr	r1, [pc, #44]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4904      	ldr	r1, [pc, #16]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	42420440 	.word	0x42420440

08002c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e041      	b.n	8002cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fb98 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 fa20 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d122      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d11b      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f06f 0202 	mvn.w	r2, #2
 8002d0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f9b4 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002d26:	e005      	b.n	8002d34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f9a7 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9b6 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d122      	bne.n	8002d8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d11b      	bne.n	8002d8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0204 	mvn.w	r2, #4
 8002d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f98a 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002d7a:	e005      	b.n	8002d88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f97d 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f98c 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d122      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d11b      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f06f 0208 	mvn.w	r2, #8
 8002db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2204      	movs	r2, #4
 8002db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f960 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002dce:	e005      	b.n	8002ddc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f953 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f962 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d122      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d11b      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0210 	mvn.w	r2, #16
 8002e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f936 	bl	800308e <HAL_TIM_IC_CaptureCallback>
 8002e22:	e005      	b.n	8002e30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f929 	bl	800307c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f938 	bl	80030a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0201 	mvn.w	r2, #1
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fe fa29 	bl	80012b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d10e      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d107      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fa7a 	bl	8003382 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d10e      	bne.n	8002eba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d107      	bne.n	8002eba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8fc 	bl	80030b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d10e      	bne.n	8002ee6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d107      	bne.n	8002ee6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f06f 0220 	mvn.w	r2, #32
 8002ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fa45 	bl	8003370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_ConfigClockSource+0x1c>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0b4      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x186>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f30:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	d03e      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0xd4>
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f48:	f200 8087 	bhi.w	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	f000 8086 	beq.w	8003060 <HAL_TIM_ConfigClockSource+0x172>
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d87f      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f5a:	2b70      	cmp	r3, #112	; 0x70
 8002f5c:	d01a      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0xa6>
 8002f5e:	2b70      	cmp	r3, #112	; 0x70
 8002f60:	d87b      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f62:	2b60      	cmp	r3, #96	; 0x60
 8002f64:	d050      	beq.n	8003008 <HAL_TIM_ConfigClockSource+0x11a>
 8002f66:	2b60      	cmp	r3, #96	; 0x60
 8002f68:	d877      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f6a:	2b50      	cmp	r3, #80	; 0x50
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0xfa>
 8002f6e:	2b50      	cmp	r3, #80	; 0x50
 8002f70:	d873      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d058      	beq.n	8003028 <HAL_TIM_ConfigClockSource+0x13a>
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d86f      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f7a:	2b30      	cmp	r3, #48	; 0x30
 8002f7c:	d064      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0x15a>
 8002f7e:	2b30      	cmp	r3, #48	; 0x30
 8002f80:	d86b      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d060      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0x15a>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d867      	bhi.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d05c      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0x15a>
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d05a      	beq.n	8003048 <HAL_TIM_ConfigClockSource+0x15a>
 8002f92:	e062      	b.n	800305a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa4:	f000 f967 	bl	8003276 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]
      break;
 8002fc0:	e04f      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fd2:	f000 f950 	bl	8003276 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe4:	609a      	str	r2, [r3, #8]
      break;
 8002fe6:	e03c      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f000 f8c7 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2150      	movs	r1, #80	; 0x50
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f91e 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8003006:	e02c      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003014:	461a      	mov	r2, r3
 8003016:	f000 f8e5 	bl	80031e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2160      	movs	r1, #96	; 0x60
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f90e 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8003026:	e01c      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003034:	461a      	mov	r2, r3
 8003036:	f000 f8a7 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2140      	movs	r1, #64	; 0x40
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f8fe 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8003046:	e00c      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 f8f5 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8003058:	e003      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      break;
 800305e:	e000      	b.n	8003062 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003060:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <TIM_Base_SetConfig+0xb8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a26      	ldr	r2, [pc, #152]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x30>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <TIM_Base_SetConfig+0xb8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <TIM_Base_SetConfig+0xbc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <TIM_Base_SetConfig+0xc0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <TIM_Base_SetConfig+0xb8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d103      	bne.n	800316c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	615a      	str	r2, [r3, #20]
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 030a 	bic.w	r3, r3, #10
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0210 	bic.w	r2, r3, #16
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800320e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	031b      	lsls	r3, r3, #12
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003220:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003242:	b480      	push	{r7}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	f043 0307 	orr.w	r3, r3, #7
 8003264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003276:	b480      	push	{r7}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003290:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	021a      	lsls	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	431a      	orrs	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4313      	orrs	r3, r2
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	609a      	str	r2, [r3, #8]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e046      	b.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d009      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10c      	bne.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4313      	orrs	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800

08003370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e042      	b.n	800342c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f814 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f91d 	bl	8003618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800340c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b20      	cmp	r3, #32
 8003452:	d16d      	bne.n	8003530 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Transmit+0x2c>
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e066      	b.n	8003532 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003472:	f7fe f8f1 	bl	8001658 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x6c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a8:	e02a      	b.n	8003500 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f840 	bl	800353a <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3302      	adds	r3, #2
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e007      	b.n	80034f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1cf      	bne.n	80034aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f810 	bl	800353a <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e006      	b.n	8003532 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b090      	sub	sp, #64	; 0x40
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354a:	e050      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d04c      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x30>
 800355a:	f7fe f87d 	bl	8001658 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003566:	429a      	cmp	r2, r3
 8003568:	d241      	bcs.n	80035ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358a:	637a      	str	r2, [r7, #52]	; 0x34
 800358c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e5      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	613b      	str	r3, [r7, #16]
   return(result);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3314      	adds	r3, #20
 80035bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035be:	623a      	str	r2, [r7, #32]
 80035c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e5      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d09f      	beq.n	800354c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3740      	adds	r7, #64	; 0x40
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003652:	f023 030c 	bic.w	r3, r3, #12
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	430b      	orrs	r3, r1
 800365e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	; (800372c <UART_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7ff f9f6 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	e002      	b.n	800368e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7ff f9de 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 800368c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	4a22      	ldr	r2, [pc, #136]	; (8003730 <UART_SetConfig+0x118>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	0119      	lsls	r1, r3, #4
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <UART_SetConfig+0x118>)
 80036c6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	fb00 f303 	mul.w	r3, r0, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <UART_SetConfig+0x118>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	4419      	add	r1, r3
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009a      	lsls	r2, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <UART_SetConfig+0x118>)
 80036fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2064      	movs	r0, #100	; 0x64
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	3332      	adds	r3, #50	; 0x32
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <UART_SetConfig+0x118>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	440a      	add	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40013800 	.word	0x40013800
 8003730:	51eb851f 	.word	0x51eb851f

08003734 <siprintf>:
 8003734:	b40e      	push	{r1, r2, r3}
 8003736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800373a:	b500      	push	{lr}
 800373c:	b09c      	sub	sp, #112	; 0x70
 800373e:	ab1d      	add	r3, sp, #116	; 0x74
 8003740:	9002      	str	r0, [sp, #8]
 8003742:	9006      	str	r0, [sp, #24]
 8003744:	9107      	str	r1, [sp, #28]
 8003746:	9104      	str	r1, [sp, #16]
 8003748:	4808      	ldr	r0, [pc, #32]	; (800376c <siprintf+0x38>)
 800374a:	4909      	ldr	r1, [pc, #36]	; (8003770 <siprintf+0x3c>)
 800374c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003750:	9105      	str	r1, [sp, #20]
 8003752:	6800      	ldr	r0, [r0, #0]
 8003754:	a902      	add	r1, sp, #8
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	f000 f99e 	bl	8003a98 <_svfiprintf_r>
 800375c:	2200      	movs	r2, #0
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	b01c      	add	sp, #112	; 0x70
 8003764:	f85d eb04 	ldr.w	lr, [sp], #4
 8003768:	b003      	add	sp, #12
 800376a:	4770      	bx	lr
 800376c:	20000058 	.word	0x20000058
 8003770:	ffff0208 	.word	0xffff0208

08003774 <memset>:
 8003774:	4603      	mov	r3, r0
 8003776:	4402      	add	r2, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <strcat>:
 8003784:	4602      	mov	r2, r0
 8003786:	b510      	push	{r4, lr}
 8003788:	7814      	ldrb	r4, [r2, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	3201      	adds	r2, #1
 800378e:	2c00      	cmp	r4, #0
 8003790:	d1fa      	bne.n	8003788 <strcat+0x4>
 8003792:	3b01      	subs	r3, #1
 8003794:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003798:	f803 2f01 	strb.w	r2, [r3, #1]!
 800379c:	2a00      	cmp	r2, #0
 800379e:	d1f9      	bne.n	8003794 <strcat+0x10>
 80037a0:	bd10      	pop	{r4, pc}
	...

080037a4 <__errno>:
 80037a4:	4b01      	ldr	r3, [pc, #4]	; (80037ac <__errno+0x8>)
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000058 	.word	0x20000058

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	2600      	movs	r6, #0
 80037b4:	4d0c      	ldr	r5, [pc, #48]	; (80037e8 <__libc_init_array+0x38>)
 80037b6:	4c0d      	ldr	r4, [pc, #52]	; (80037ec <__libc_init_array+0x3c>)
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	f000 fc7a 	bl	80040b8 <_init>
 80037c4:	2600      	movs	r6, #0
 80037c6:	4d0a      	ldr	r5, [pc, #40]	; (80037f0 <__libc_init_array+0x40>)
 80037c8:	4c0a      	ldr	r4, [pc, #40]	; (80037f4 <__libc_init_array+0x44>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	08004240 	.word	0x08004240
 80037ec:	08004240 	.word	0x08004240
 80037f0:	08004240 	.word	0x08004240
 80037f4:	08004244 	.word	0x08004244

080037f8 <__retarget_lock_acquire_recursive>:
 80037f8:	4770      	bx	lr

080037fa <__retarget_lock_release_recursive>:
 80037fa:	4770      	bx	lr

080037fc <_free_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4605      	mov	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d040      	beq.n	8003886 <_free_r+0x8a>
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f0c      	subs	r4, r1, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	18e4      	addlt	r4, r4, r3
 8003810:	f000 f8dc 	bl	80039cc <__malloc_lock>
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <_free_r+0x8c>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	b933      	cbnz	r3, 8003828 <_free_r+0x2c>
 800381a:	6063      	str	r3, [r4, #4]
 800381c:	6014      	str	r4, [r2, #0]
 800381e:	4628      	mov	r0, r5
 8003820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003824:	f000 b8d8 	b.w	80039d8 <__malloc_unlock>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x42>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	1821      	adds	r1, r4, r0
 8003830:	428b      	cmp	r3, r1
 8003832:	bf01      	itttt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	1809      	addeq	r1, r1, r0
 800383a:	6021      	streq	r1, [r4, #0]
 800383c:	e7ed      	b.n	800381a <_free_r+0x1e>
 800383e:	461a      	mov	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b10b      	cbz	r3, 8003848 <_free_r+0x4c>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d9fa      	bls.n	800383e <_free_r+0x42>
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	1850      	adds	r0, r2, r1
 800384c:	42a0      	cmp	r0, r4
 800384e:	d10b      	bne.n	8003868 <_free_r+0x6c>
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	4401      	add	r1, r0
 8003854:	1850      	adds	r0, r2, r1
 8003856:	4283      	cmp	r3, r0
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	d1e0      	bne.n	800381e <_free_r+0x22>
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4408      	add	r0, r1
 8003862:	6010      	str	r0, [r2, #0]
 8003864:	6053      	str	r3, [r2, #4]
 8003866:	e7da      	b.n	800381e <_free_r+0x22>
 8003868:	d902      	bls.n	8003870 <_free_r+0x74>
 800386a:	230c      	movs	r3, #12
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	e7d6      	b.n	800381e <_free_r+0x22>
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	1821      	adds	r1, r4, r0
 8003874:	428b      	cmp	r3, r1
 8003876:	bf01      	itttt	eq
 8003878:	6819      	ldreq	r1, [r3, #0]
 800387a:	685b      	ldreq	r3, [r3, #4]
 800387c:	1809      	addeq	r1, r1, r0
 800387e:	6021      	streq	r1, [r4, #0]
 8003880:	6063      	str	r3, [r4, #4]
 8003882:	6054      	str	r4, [r2, #4]
 8003884:	e7cb      	b.n	800381e <_free_r+0x22>
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	200005a8 	.word	0x200005a8

0800388c <sbrk_aligned>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4e0e      	ldr	r6, [pc, #56]	; (80038c8 <sbrk_aligned+0x3c>)
 8003890:	460c      	mov	r4, r1
 8003892:	6831      	ldr	r1, [r6, #0]
 8003894:	4605      	mov	r5, r0
 8003896:	b911      	cbnz	r1, 800389e <sbrk_aligned+0x12>
 8003898:	f000 fbaa 	bl	8003ff0 <_sbrk_r>
 800389c:	6030      	str	r0, [r6, #0]
 800389e:	4621      	mov	r1, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 fba5 	bl	8003ff0 <_sbrk_r>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	d00a      	beq.n	80038c0 <sbrk_aligned+0x34>
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d007      	beq.n	80038c4 <sbrk_aligned+0x38>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 fb9a 	bl	8003ff0 <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d101      	bne.n	80038c4 <sbrk_aligned+0x38>
 80038c0:	f04f 34ff 	mov.w	r4, #4294967295
 80038c4:	4620      	mov	r0, r4
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	200005ac 	.word	0x200005ac

080038cc <_malloc_r>:
 80038cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d0:	1ccd      	adds	r5, r1, #3
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	2d00      	cmp	r5, #0
 80038e0:	4607      	mov	r7, r0
 80038e2:	db01      	blt.n	80038e8 <_malloc_r+0x1c>
 80038e4:	42a9      	cmp	r1, r5
 80038e6:	d905      	bls.n	80038f4 <_malloc_r+0x28>
 80038e8:	230c      	movs	r3, #12
 80038ea:	2600      	movs	r6, #0
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4630      	mov	r0, r6
 80038f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039c8 <_malloc_r+0xfc>
 80038f8:	f000 f868 	bl	80039cc <__malloc_lock>
 80038fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003900:	461c      	mov	r4, r3
 8003902:	bb5c      	cbnz	r4, 800395c <_malloc_r+0x90>
 8003904:	4629      	mov	r1, r5
 8003906:	4638      	mov	r0, r7
 8003908:	f7ff ffc0 	bl	800388c <sbrk_aligned>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	4604      	mov	r4, r0
 8003910:	d155      	bne.n	80039be <_malloc_r+0xf2>
 8003912:	f8d8 4000 	ldr.w	r4, [r8]
 8003916:	4626      	mov	r6, r4
 8003918:	2e00      	cmp	r6, #0
 800391a:	d145      	bne.n	80039a8 <_malloc_r+0xdc>
 800391c:	2c00      	cmp	r4, #0
 800391e:	d048      	beq.n	80039b2 <_malloc_r+0xe6>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	4631      	mov	r1, r6
 8003924:	4638      	mov	r0, r7
 8003926:	eb04 0903 	add.w	r9, r4, r3
 800392a:	f000 fb61 	bl	8003ff0 <_sbrk_r>
 800392e:	4581      	cmp	r9, r0
 8003930:	d13f      	bne.n	80039b2 <_malloc_r+0xe6>
 8003932:	6821      	ldr	r1, [r4, #0]
 8003934:	4638      	mov	r0, r7
 8003936:	1a6d      	subs	r5, r5, r1
 8003938:	4629      	mov	r1, r5
 800393a:	f7ff ffa7 	bl	800388c <sbrk_aligned>
 800393e:	3001      	adds	r0, #1
 8003940:	d037      	beq.n	80039b2 <_malloc_r+0xe6>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	442b      	add	r3, r5
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	f8d8 3000 	ldr.w	r3, [r8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d038      	beq.n	80039c2 <_malloc_r+0xf6>
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	42a2      	cmp	r2, r4
 8003954:	d12b      	bne.n	80039ae <_malloc_r+0xe2>
 8003956:	2200      	movs	r2, #0
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e00f      	b.n	800397c <_malloc_r+0xb0>
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	1b52      	subs	r2, r2, r5
 8003960:	d41f      	bmi.n	80039a2 <_malloc_r+0xd6>
 8003962:	2a0b      	cmp	r2, #11
 8003964:	d917      	bls.n	8003996 <_malloc_r+0xca>
 8003966:	1961      	adds	r1, r4, r5
 8003968:	42a3      	cmp	r3, r4
 800396a:	6025      	str	r5, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	6059      	strne	r1, [r3, #4]
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	bf08      	it	eq
 8003974:	f8c8 1000 	streq.w	r1, [r8]
 8003978:	5162      	str	r2, [r4, r5]
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	4638      	mov	r0, r7
 800397e:	f104 060b 	add.w	r6, r4, #11
 8003982:	f000 f829 	bl	80039d8 <__malloc_unlock>
 8003986:	f026 0607 	bic.w	r6, r6, #7
 800398a:	1d23      	adds	r3, r4, #4
 800398c:	1af2      	subs	r2, r6, r3
 800398e:	d0ae      	beq.n	80038ee <_malloc_r+0x22>
 8003990:	1b9b      	subs	r3, r3, r6
 8003992:	50a3      	str	r3, [r4, r2]
 8003994:	e7ab      	b.n	80038ee <_malloc_r+0x22>
 8003996:	42a3      	cmp	r3, r4
 8003998:	6862      	ldr	r2, [r4, #4]
 800399a:	d1dd      	bne.n	8003958 <_malloc_r+0x8c>
 800399c:	f8c8 2000 	str.w	r2, [r8]
 80039a0:	e7ec      	b.n	800397c <_malloc_r+0xb0>
 80039a2:	4623      	mov	r3, r4
 80039a4:	6864      	ldr	r4, [r4, #4]
 80039a6:	e7ac      	b.n	8003902 <_malloc_r+0x36>
 80039a8:	4634      	mov	r4, r6
 80039aa:	6876      	ldr	r6, [r6, #4]
 80039ac:	e7b4      	b.n	8003918 <_malloc_r+0x4c>
 80039ae:	4613      	mov	r3, r2
 80039b0:	e7cc      	b.n	800394c <_malloc_r+0x80>
 80039b2:	230c      	movs	r3, #12
 80039b4:	4638      	mov	r0, r7
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	f000 f80e 	bl	80039d8 <__malloc_unlock>
 80039bc:	e797      	b.n	80038ee <_malloc_r+0x22>
 80039be:	6025      	str	r5, [r4, #0]
 80039c0:	e7dc      	b.n	800397c <_malloc_r+0xb0>
 80039c2:	605b      	str	r3, [r3, #4]
 80039c4:	deff      	udf	#255	; 0xff
 80039c6:	bf00      	nop
 80039c8:	200005a8 	.word	0x200005a8

080039cc <__malloc_lock>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__malloc_lock+0x8>)
 80039ce:	f7ff bf13 	b.w	80037f8 <__retarget_lock_acquire_recursive>
 80039d2:	bf00      	nop
 80039d4:	200005a4 	.word	0x200005a4

080039d8 <__malloc_unlock>:
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <__malloc_unlock+0x8>)
 80039da:	f7ff bf0e 	b.w	80037fa <__retarget_lock_release_recursive>
 80039de:	bf00      	nop
 80039e0:	200005a4 	.word	0x200005a4

080039e4 <__ssputs_r>:
 80039e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e8:	461f      	mov	r7, r3
 80039ea:	688e      	ldr	r6, [r1, #8]
 80039ec:	4682      	mov	sl, r0
 80039ee:	42be      	cmp	r6, r7
 80039f0:	460c      	mov	r4, r1
 80039f2:	4690      	mov	r8, r2
 80039f4:	680b      	ldr	r3, [r1, #0]
 80039f6:	d82c      	bhi.n	8003a52 <__ssputs_r+0x6e>
 80039f8:	898a      	ldrh	r2, [r1, #12]
 80039fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039fe:	d026      	beq.n	8003a4e <__ssputs_r+0x6a>
 8003a00:	6965      	ldr	r5, [r4, #20]
 8003a02:	6909      	ldr	r1, [r1, #16]
 8003a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a08:	eba3 0901 	sub.w	r9, r3, r1
 8003a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a10:	1c7b      	adds	r3, r7, #1
 8003a12:	444b      	add	r3, r9
 8003a14:	106d      	asrs	r5, r5, #1
 8003a16:	429d      	cmp	r5, r3
 8003a18:	bf38      	it	cc
 8003a1a:	461d      	movcc	r5, r3
 8003a1c:	0553      	lsls	r3, r2, #21
 8003a1e:	d527      	bpl.n	8003a70 <__ssputs_r+0x8c>
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7ff ff53 	bl	80038cc <_malloc_r>
 8003a26:	4606      	mov	r6, r0
 8003a28:	b360      	cbz	r0, 8003a84 <__ssputs_r+0xa0>
 8003a2a:	464a      	mov	r2, r9
 8003a2c:	6921      	ldr	r1, [r4, #16]
 8003a2e:	f000 fafd 	bl	800402c <memcpy>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	6126      	str	r6, [r4, #16]
 8003a40:	444e      	add	r6, r9
 8003a42:	6026      	str	r6, [r4, #0]
 8003a44:	463e      	mov	r6, r7
 8003a46:	6165      	str	r5, [r4, #20]
 8003a48:	eba5 0509 	sub.w	r5, r5, r9
 8003a4c:	60a5      	str	r5, [r4, #8]
 8003a4e:	42be      	cmp	r6, r7
 8003a50:	d900      	bls.n	8003a54 <__ssputs_r+0x70>
 8003a52:	463e      	mov	r6, r7
 8003a54:	4632      	mov	r2, r6
 8003a56:	4641      	mov	r1, r8
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	f000 faaf 	bl	8003fbc <memmove>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	68a3      	ldr	r3, [r4, #8]
 8003a62:	1b9b      	subs	r3, r3, r6
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	4433      	add	r3, r6
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	462a      	mov	r2, r5
 8003a72:	f000 fae9 	bl	8004048 <_realloc_r>
 8003a76:	4606      	mov	r6, r0
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d1e0      	bne.n	8003a3e <__ssputs_r+0x5a>
 8003a7c:	4650      	mov	r0, sl
 8003a7e:	6921      	ldr	r1, [r4, #16]
 8003a80:	f7ff febc 	bl	80037fc <_free_r>
 8003a84:	230c      	movs	r3, #12
 8003a86:	f8ca 3000 	str.w	r3, [sl]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	e7e9      	b.n	8003a6c <__ssputs_r+0x88>

08003a98 <_svfiprintf_r>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	4698      	mov	r8, r3
 8003a9e:	898b      	ldrh	r3, [r1, #12]
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	b09d      	sub	sp, #116	; 0x74
 8003aaa:	d50e      	bpl.n	8003aca <_svfiprintf_r+0x32>
 8003aac:	690b      	ldr	r3, [r1, #16]
 8003aae:	b963      	cbnz	r3, 8003aca <_svfiprintf_r+0x32>
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	f7ff ff0b 	bl	80038cc <_malloc_r>
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	6128      	str	r0, [r5, #16]
 8003aba:	b920      	cbnz	r0, 8003ac6 <_svfiprintf_r+0x2e>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e0d0      	b.n	8003c68 <_svfiprintf_r+0x1d0>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	616b      	str	r3, [r5, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ace:	2320      	movs	r3, #32
 8003ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ad4:	2330      	movs	r3, #48	; 0x30
 8003ad6:	f04f 0901 	mov.w	r9, #1
 8003ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ade:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003c80 <_svfiprintf_r+0x1e8>
 8003ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	469a      	mov	sl, r3
 8003aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aee:	b10a      	cbz	r2, 8003af4 <_svfiprintf_r+0x5c>
 8003af0:	2a25      	cmp	r2, #37	; 0x25
 8003af2:	d1f9      	bne.n	8003ae8 <_svfiprintf_r+0x50>
 8003af4:	ebba 0b04 	subs.w	fp, sl, r4
 8003af8:	d00b      	beq.n	8003b12 <_svfiprintf_r+0x7a>
 8003afa:	465b      	mov	r3, fp
 8003afc:	4622      	mov	r2, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	4638      	mov	r0, r7
 8003b02:	f7ff ff6f 	bl	80039e4 <__ssputs_r>
 8003b06:	3001      	adds	r0, #1
 8003b08:	f000 80a9 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b0e:	445a      	add	r2, fp
 8003b10:	9209      	str	r2, [sp, #36]	; 0x24
 8003b12:	f89a 3000 	ldrb.w	r3, [sl]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80a1 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b26:	f10a 0a01 	add.w	sl, sl, #1
 8003b2a:	9304      	str	r3, [sp, #16]
 8003b2c:	9307      	str	r3, [sp, #28]
 8003b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b32:	931a      	str	r3, [sp, #104]	; 0x68
 8003b34:	4654      	mov	r4, sl
 8003b36:	2205      	movs	r2, #5
 8003b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3c:	4850      	ldr	r0, [pc, #320]	; (8003c80 <_svfiprintf_r+0x1e8>)
 8003b3e:	f000 fa67 	bl	8004010 <memchr>
 8003b42:	9a04      	ldr	r2, [sp, #16]
 8003b44:	b9d8      	cbnz	r0, 8003b7e <_svfiprintf_r+0xe6>
 8003b46:	06d0      	lsls	r0, r2, #27
 8003b48:	bf44      	itt	mi
 8003b4a:	2320      	movmi	r3, #32
 8003b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b50:	0711      	lsls	r1, r2, #28
 8003b52:	bf44      	itt	mi
 8003b54:	232b      	movmi	r3, #43	; 0x2b
 8003b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b60:	d015      	beq.n	8003b8e <_svfiprintf_r+0xf6>
 8003b62:	4654      	mov	r4, sl
 8003b64:	2000      	movs	r0, #0
 8003b66:	f04f 0c0a 	mov.w	ip, #10
 8003b6a:	9a07      	ldr	r2, [sp, #28]
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b72:	3b30      	subs	r3, #48	; 0x30
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d94d      	bls.n	8003c14 <_svfiprintf_r+0x17c>
 8003b78:	b1b0      	cbz	r0, 8003ba8 <_svfiprintf_r+0x110>
 8003b7a:	9207      	str	r2, [sp, #28]
 8003b7c:	e014      	b.n	8003ba8 <_svfiprintf_r+0x110>
 8003b7e:	eba0 0308 	sub.w	r3, r0, r8
 8003b82:	fa09 f303 	lsl.w	r3, r9, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	46a2      	mov	sl, r4
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	e7d2      	b.n	8003b34 <_svfiprintf_r+0x9c>
 8003b8e:	9b03      	ldr	r3, [sp, #12]
 8003b90:	1d19      	adds	r1, r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	9103      	str	r1, [sp, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bfbb      	ittet	lt
 8003b9a:	425b      	neglt	r3, r3
 8003b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba0:	9307      	strge	r3, [sp, #28]
 8003ba2:	9307      	strlt	r3, [sp, #28]
 8003ba4:	bfb8      	it	lt
 8003ba6:	9204      	strlt	r2, [sp, #16]
 8003ba8:	7823      	ldrb	r3, [r4, #0]
 8003baa:	2b2e      	cmp	r3, #46	; 0x2e
 8003bac:	d10c      	bne.n	8003bc8 <_svfiprintf_r+0x130>
 8003bae:	7863      	ldrb	r3, [r4, #1]
 8003bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb2:	d134      	bne.n	8003c1e <_svfiprintf_r+0x186>
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	3402      	adds	r4, #2
 8003bb8:	1d1a      	adds	r2, r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	9203      	str	r2, [sp, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bfb8      	it	lt
 8003bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003c84 <_svfiprintf_r+0x1ec>
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4650      	mov	r0, sl
 8003bd0:	7821      	ldrb	r1, [r4, #0]
 8003bd2:	f000 fa1d 	bl	8004010 <memchr>
 8003bd6:	b138      	cbz	r0, 8003be8 <_svfiprintf_r+0x150>
 8003bd8:	2240      	movs	r2, #64	; 0x40
 8003bda:	9b04      	ldr	r3, [sp, #16]
 8003bdc:	eba0 000a 	sub.w	r0, r0, sl
 8003be0:	4082      	lsls	r2, r0
 8003be2:	4313      	orrs	r3, r2
 8003be4:	3401      	adds	r4, #1
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bec:	2206      	movs	r2, #6
 8003bee:	4826      	ldr	r0, [pc, #152]	; (8003c88 <_svfiprintf_r+0x1f0>)
 8003bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf4:	f000 fa0c 	bl	8004010 <memchr>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d038      	beq.n	8003c6e <_svfiprintf_r+0x1d6>
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <_svfiprintf_r+0x1f4>)
 8003bfe:	bb1b      	cbnz	r3, 8003c48 <_svfiprintf_r+0x1b0>
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	3307      	adds	r3, #7
 8003c04:	f023 0307 	bic.w	r3, r3, #7
 8003c08:	3308      	adds	r3, #8
 8003c0a:	9303      	str	r3, [sp, #12]
 8003c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0e:	4433      	add	r3, r6
 8003c10:	9309      	str	r3, [sp, #36]	; 0x24
 8003c12:	e768      	b.n	8003ae6 <_svfiprintf_r+0x4e>
 8003c14:	460c      	mov	r4, r1
 8003c16:	2001      	movs	r0, #1
 8003c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c1c:	e7a6      	b.n	8003b6c <_svfiprintf_r+0xd4>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f04f 0c0a 	mov.w	ip, #10
 8003c24:	4619      	mov	r1, r3
 8003c26:	3401      	adds	r4, #1
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c30:	3a30      	subs	r2, #48	; 0x30
 8003c32:	2a09      	cmp	r2, #9
 8003c34:	d903      	bls.n	8003c3e <_svfiprintf_r+0x1a6>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c6      	beq.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3a:	9105      	str	r1, [sp, #20]
 8003c3c:	e7c4      	b.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3e:	4604      	mov	r4, r0
 8003c40:	2301      	movs	r3, #1
 8003c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c46:	e7f0      	b.n	8003c2a <_svfiprintf_r+0x192>
 8003c48:	ab03      	add	r3, sp, #12
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4638      	mov	r0, r7
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <_svfiprintf_r+0x1f8>)
 8003c52:	a904      	add	r1, sp, #16
 8003c54:	f3af 8000 	nop.w
 8003c58:	1c42      	adds	r2, r0, #1
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	d1d6      	bne.n	8003c0c <_svfiprintf_r+0x174>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	065b      	lsls	r3, r3, #25
 8003c62:	f53f af2d 	bmi.w	8003ac0 <_svfiprintf_r+0x28>
 8003c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c68:	b01d      	add	sp, #116	; 0x74
 8003c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6e:	ab03      	add	r3, sp, #12
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	462a      	mov	r2, r5
 8003c74:	4638      	mov	r0, r7
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <_svfiprintf_r+0x1f8>)
 8003c78:	a904      	add	r1, sp, #16
 8003c7a:	f000 f87d 	bl	8003d78 <_printf_i>
 8003c7e:	e7eb      	b.n	8003c58 <_svfiprintf_r+0x1c0>
 8003c80:	0800420a 	.word	0x0800420a
 8003c84:	08004210 	.word	0x08004210
 8003c88:	08004214 	.word	0x08004214
 8003c8c:	00000000 	.word	0x00000000
 8003c90:	080039e5 	.word	0x080039e5

08003c94 <_printf_common>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	4616      	mov	r6, r2
 8003c9a:	4699      	mov	r9, r3
 8003c9c:	688a      	ldr	r2, [r1, #8]
 8003c9e:	690b      	ldr	r3, [r1, #16]
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bfb8      	it	lt
 8003ca6:	4613      	movlt	r3, r2
 8003ca8:	6033      	str	r3, [r6, #0]
 8003caa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cb4:	b10a      	cbz	r2, 8003cba <_printf_common+0x26>
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	0699      	lsls	r1, r3, #26
 8003cbe:	bf42      	ittt	mi
 8003cc0:	6833      	ldrmi	r3, [r6, #0]
 8003cc2:	3302      	addmi	r3, #2
 8003cc4:	6033      	strmi	r3, [r6, #0]
 8003cc6:	6825      	ldr	r5, [r4, #0]
 8003cc8:	f015 0506 	ands.w	r5, r5, #6
 8003ccc:	d106      	bne.n	8003cdc <_printf_common+0x48>
 8003cce:	f104 0a19 	add.w	sl, r4, #25
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	6832      	ldr	r2, [r6, #0]
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	42ab      	cmp	r3, r5
 8003cda:	dc2b      	bgt.n	8003d34 <_printf_common+0xa0>
 8003cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ce0:	1e13      	subs	r3, r2, #0
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	bf18      	it	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	0692      	lsls	r2, r2, #26
 8003cea:	d430      	bmi.n	8003d4e <_printf_common+0xba>
 8003cec:	4649      	mov	r1, r9
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cf4:	47c0      	blx	r8
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d023      	beq.n	8003d42 <_printf_common+0xae>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	6922      	ldr	r2, [r4, #16]
 8003cfe:	f003 0306 	and.w	r3, r3, #6
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	bf14      	ite	ne
 8003d06:	2500      	movne	r5, #0
 8003d08:	6833      	ldreq	r3, [r6, #0]
 8003d0a:	f04f 0600 	mov.w	r6, #0
 8003d0e:	bf08      	it	eq
 8003d10:	68e5      	ldreq	r5, [r4, #12]
 8003d12:	f104 041a 	add.w	r4, r4, #26
 8003d16:	bf08      	it	eq
 8003d18:	1aed      	subeq	r5, r5, r3
 8003d1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d1e:	bf08      	it	eq
 8003d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bfc4      	itt	gt
 8003d28:	1a9b      	subgt	r3, r3, r2
 8003d2a:	18ed      	addgt	r5, r5, r3
 8003d2c:	42b5      	cmp	r5, r6
 8003d2e:	d11a      	bne.n	8003d66 <_printf_common+0xd2>
 8003d30:	2000      	movs	r0, #0
 8003d32:	e008      	b.n	8003d46 <_printf_common+0xb2>
 8003d34:	2301      	movs	r3, #1
 8003d36:	4652      	mov	r2, sl
 8003d38:	4649      	mov	r1, r9
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c0      	blx	r8
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d103      	bne.n	8003d4a <_printf_common+0xb6>
 8003d42:	f04f 30ff 	mov.w	r0, #4294967295
 8003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4a:	3501      	adds	r5, #1
 8003d4c:	e7c1      	b.n	8003cd2 <_printf_common+0x3e>
 8003d4e:	2030      	movs	r0, #48	; 0x30
 8003d50:	18e1      	adds	r1, r4, r3
 8003d52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d5c:	4422      	add	r2, r4
 8003d5e:	3302      	adds	r3, #2
 8003d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d64:	e7c2      	b.n	8003cec <_printf_common+0x58>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	47c0      	blx	r8
 8003d70:	3001      	adds	r0, #1
 8003d72:	d0e6      	beq.n	8003d42 <_printf_common+0xae>
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7d9      	b.n	8003d2c <_printf_common+0x98>

08003d78 <_printf_i>:
 8003d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	7e0f      	ldrb	r7, [r1, #24]
 8003d7e:	4691      	mov	r9, r2
 8003d80:	2f78      	cmp	r7, #120	; 0x78
 8003d82:	4680      	mov	r8, r0
 8003d84:	460c      	mov	r4, r1
 8003d86:	469a      	mov	sl, r3
 8003d88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d8e:	d807      	bhi.n	8003da0 <_printf_i+0x28>
 8003d90:	2f62      	cmp	r7, #98	; 0x62
 8003d92:	d80a      	bhi.n	8003daa <_printf_i+0x32>
 8003d94:	2f00      	cmp	r7, #0
 8003d96:	f000 80d5 	beq.w	8003f44 <_printf_i+0x1cc>
 8003d9a:	2f58      	cmp	r7, #88	; 0x58
 8003d9c:	f000 80c1 	beq.w	8003f22 <_printf_i+0x1aa>
 8003da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003da8:	e03a      	b.n	8003e20 <_printf_i+0xa8>
 8003daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dae:	2b15      	cmp	r3, #21
 8003db0:	d8f6      	bhi.n	8003da0 <_printf_i+0x28>
 8003db2:	a101      	add	r1, pc, #4	; (adr r1, 8003db8 <_printf_i+0x40>)
 8003db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db8:	08003e11 	.word	0x08003e11
 8003dbc:	08003e25 	.word	0x08003e25
 8003dc0:	08003da1 	.word	0x08003da1
 8003dc4:	08003da1 	.word	0x08003da1
 8003dc8:	08003da1 	.word	0x08003da1
 8003dcc:	08003da1 	.word	0x08003da1
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003da1 	.word	0x08003da1
 8003dd8:	08003da1 	.word	0x08003da1
 8003ddc:	08003da1 	.word	0x08003da1
 8003de0:	08003da1 	.word	0x08003da1
 8003de4:	08003f2b 	.word	0x08003f2b
 8003de8:	08003e51 	.word	0x08003e51
 8003dec:	08003ee5 	.word	0x08003ee5
 8003df0:	08003da1 	.word	0x08003da1
 8003df4:	08003da1 	.word	0x08003da1
 8003df8:	08003f4d 	.word	0x08003f4d
 8003dfc:	08003da1 	.word	0x08003da1
 8003e00:	08003e51 	.word	0x08003e51
 8003e04:	08003da1 	.word	0x08003da1
 8003e08:	08003da1 	.word	0x08003da1
 8003e0c:	08003eed 	.word	0x08003eed
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	602a      	str	r2, [r5, #0]
 8003e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0a0      	b.n	8003f66 <_printf_i+0x1ee>
 8003e24:	6820      	ldr	r0, [r4, #0]
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	0607      	lsls	r7, r0, #24
 8003e2a:	f103 0104 	add.w	r1, r3, #4
 8003e2e:	6029      	str	r1, [r5, #0]
 8003e30:	d501      	bpl.n	8003e36 <_printf_i+0xbe>
 8003e32:	681e      	ldr	r6, [r3, #0]
 8003e34:	e003      	b.n	8003e3e <_printf_i+0xc6>
 8003e36:	0646      	lsls	r6, r0, #25
 8003e38:	d5fb      	bpl.n	8003e32 <_printf_i+0xba>
 8003e3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e3e:	2e00      	cmp	r6, #0
 8003e40:	da03      	bge.n	8003e4a <_printf_i+0xd2>
 8003e42:	232d      	movs	r3, #45	; 0x2d
 8003e44:	4276      	negs	r6, r6
 8003e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e4a:	230a      	movs	r3, #10
 8003e4c:	4859      	ldr	r0, [pc, #356]	; (8003fb4 <_printf_i+0x23c>)
 8003e4e:	e012      	b.n	8003e76 <_printf_i+0xfe>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	6820      	ldr	r0, [r4, #0]
 8003e54:	1d19      	adds	r1, r3, #4
 8003e56:	6029      	str	r1, [r5, #0]
 8003e58:	0605      	lsls	r5, r0, #24
 8003e5a:	d501      	bpl.n	8003e60 <_printf_i+0xe8>
 8003e5c:	681e      	ldr	r6, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <_printf_i+0xee>
 8003e60:	0641      	lsls	r1, r0, #25
 8003e62:	d5fb      	bpl.n	8003e5c <_printf_i+0xe4>
 8003e64:	881e      	ldrh	r6, [r3, #0]
 8003e66:	2f6f      	cmp	r7, #111	; 0x6f
 8003e68:	bf0c      	ite	eq
 8003e6a:	2308      	moveq	r3, #8
 8003e6c:	230a      	movne	r3, #10
 8003e6e:	4851      	ldr	r0, [pc, #324]	; (8003fb4 <_printf_i+0x23c>)
 8003e70:	2100      	movs	r1, #0
 8003e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e76:	6865      	ldr	r5, [r4, #4]
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	bfa8      	it	ge
 8003e7c:	6821      	ldrge	r1, [r4, #0]
 8003e7e:	60a5      	str	r5, [r4, #8]
 8003e80:	bfa4      	itt	ge
 8003e82:	f021 0104 	bicge.w	r1, r1, #4
 8003e86:	6021      	strge	r1, [r4, #0]
 8003e88:	b90e      	cbnz	r6, 8003e8e <_printf_i+0x116>
 8003e8a:	2d00      	cmp	r5, #0
 8003e8c:	d04b      	beq.n	8003f26 <_printf_i+0x1ae>
 8003e8e:	4615      	mov	r5, r2
 8003e90:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e94:	fb03 6711 	mls	r7, r3, r1, r6
 8003e98:	5dc7      	ldrb	r7, [r0, r7]
 8003e9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e9e:	4637      	mov	r7, r6
 8003ea0:	42bb      	cmp	r3, r7
 8003ea2:	460e      	mov	r6, r1
 8003ea4:	d9f4      	bls.n	8003e90 <_printf_i+0x118>
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d10b      	bne.n	8003ec2 <_printf_i+0x14a>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	07de      	lsls	r6, r3, #31
 8003eae:	d508      	bpl.n	8003ec2 <_printf_i+0x14a>
 8003eb0:	6923      	ldr	r3, [r4, #16]
 8003eb2:	6861      	ldr	r1, [r4, #4]
 8003eb4:	4299      	cmp	r1, r3
 8003eb6:	bfde      	ittt	le
 8003eb8:	2330      	movle	r3, #48	; 0x30
 8003eba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ebe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ec2:	1b52      	subs	r2, r2, r5
 8003ec4:	6122      	str	r2, [r4, #16]
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f8cd a000 	str.w	sl, [sp]
 8003ed0:	aa03      	add	r2, sp, #12
 8003ed2:	f7ff fedf 	bl	8003c94 <_printf_common>
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d14a      	bne.n	8003f70 <_printf_i+0x1f8>
 8003eda:	f04f 30ff 	mov.w	r0, #4294967295
 8003ede:	b004      	add	sp, #16
 8003ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f043 0320 	orr.w	r3, r3, #32
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	2778      	movs	r7, #120	; 0x78
 8003eee:	4832      	ldr	r0, [pc, #200]	; (8003fb8 <_printf_i+0x240>)
 8003ef0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	6829      	ldr	r1, [r5, #0]
 8003ef8:	061f      	lsls	r7, r3, #24
 8003efa:	f851 6b04 	ldr.w	r6, [r1], #4
 8003efe:	d402      	bmi.n	8003f06 <_printf_i+0x18e>
 8003f00:	065f      	lsls	r7, r3, #25
 8003f02:	bf48      	it	mi
 8003f04:	b2b6      	uxthmi	r6, r6
 8003f06:	07df      	lsls	r7, r3, #31
 8003f08:	bf48      	it	mi
 8003f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f0e:	6029      	str	r1, [r5, #0]
 8003f10:	bf48      	it	mi
 8003f12:	6023      	strmi	r3, [r4, #0]
 8003f14:	b91e      	cbnz	r6, 8003f1e <_printf_i+0x1a6>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f023 0320 	bic.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	2310      	movs	r3, #16
 8003f20:	e7a6      	b.n	8003e70 <_printf_i+0xf8>
 8003f22:	4824      	ldr	r0, [pc, #144]	; (8003fb4 <_printf_i+0x23c>)
 8003f24:	e7e4      	b.n	8003ef0 <_printf_i+0x178>
 8003f26:	4615      	mov	r5, r2
 8003f28:	e7bd      	b.n	8003ea6 <_printf_i+0x12e>
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	6826      	ldr	r6, [r4, #0]
 8003f2e:	1d18      	adds	r0, r3, #4
 8003f30:	6961      	ldr	r1, [r4, #20]
 8003f32:	6028      	str	r0, [r5, #0]
 8003f34:	0635      	lsls	r5, r6, #24
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	d501      	bpl.n	8003f3e <_printf_i+0x1c6>
 8003f3a:	6019      	str	r1, [r3, #0]
 8003f3c:	e002      	b.n	8003f44 <_printf_i+0x1cc>
 8003f3e:	0670      	lsls	r0, r6, #25
 8003f40:	d5fb      	bpl.n	8003f3a <_printf_i+0x1c2>
 8003f42:	8019      	strh	r1, [r3, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	4615      	mov	r5, r2
 8003f48:	6123      	str	r3, [r4, #16]
 8003f4a:	e7bc      	b.n	8003ec6 <_printf_i+0x14e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	2100      	movs	r1, #0
 8003f50:	1d1a      	adds	r2, r3, #4
 8003f52:	602a      	str	r2, [r5, #0]
 8003f54:	681d      	ldr	r5, [r3, #0]
 8003f56:	6862      	ldr	r2, [r4, #4]
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 f859 	bl	8004010 <memchr>
 8003f5e:	b108      	cbz	r0, 8003f64 <_printf_i+0x1ec>
 8003f60:	1b40      	subs	r0, r0, r5
 8003f62:	6060      	str	r0, [r4, #4]
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	6123      	str	r3, [r4, #16]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f6e:	e7aa      	b.n	8003ec6 <_printf_i+0x14e>
 8003f70:	462a      	mov	r2, r5
 8003f72:	4649      	mov	r1, r9
 8003f74:	4640      	mov	r0, r8
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	47d0      	blx	sl
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d0ad      	beq.n	8003eda <_printf_i+0x162>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	079b      	lsls	r3, r3, #30
 8003f82:	d413      	bmi.n	8003fac <_printf_i+0x234>
 8003f84:	68e0      	ldr	r0, [r4, #12]
 8003f86:	9b03      	ldr	r3, [sp, #12]
 8003f88:	4298      	cmp	r0, r3
 8003f8a:	bfb8      	it	lt
 8003f8c:	4618      	movlt	r0, r3
 8003f8e:	e7a6      	b.n	8003ede <_printf_i+0x166>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4632      	mov	r2, r6
 8003f94:	4649      	mov	r1, r9
 8003f96:	4640      	mov	r0, r8
 8003f98:	47d0      	blx	sl
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d09d      	beq.n	8003eda <_printf_i+0x162>
 8003f9e:	3501      	adds	r5, #1
 8003fa0:	68e3      	ldr	r3, [r4, #12]
 8003fa2:	9903      	ldr	r1, [sp, #12]
 8003fa4:	1a5b      	subs	r3, r3, r1
 8003fa6:	42ab      	cmp	r3, r5
 8003fa8:	dcf2      	bgt.n	8003f90 <_printf_i+0x218>
 8003faa:	e7eb      	b.n	8003f84 <_printf_i+0x20c>
 8003fac:	2500      	movs	r5, #0
 8003fae:	f104 0619 	add.w	r6, r4, #25
 8003fb2:	e7f5      	b.n	8003fa0 <_printf_i+0x228>
 8003fb4:	0800421b 	.word	0x0800421b
 8003fb8:	0800422c 	.word	0x0800422c

08003fbc <memmove>:
 8003fbc:	4288      	cmp	r0, r1
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	eb01 0402 	add.w	r4, r1, r2
 8003fc4:	d902      	bls.n	8003fcc <memmove+0x10>
 8003fc6:	4284      	cmp	r4, r0
 8003fc8:	4623      	mov	r3, r4
 8003fca:	d807      	bhi.n	8003fdc <memmove+0x20>
 8003fcc:	1e43      	subs	r3, r0, #1
 8003fce:	42a1      	cmp	r1, r4
 8003fd0:	d008      	beq.n	8003fe4 <memmove+0x28>
 8003fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fda:	e7f8      	b.n	8003fce <memmove+0x12>
 8003fdc:	4601      	mov	r1, r0
 8003fde:	4402      	add	r2, r0
 8003fe0:	428a      	cmp	r2, r1
 8003fe2:	d100      	bne.n	8003fe6 <memmove+0x2a>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fee:	e7f7      	b.n	8003fe0 <memmove+0x24>

08003ff0 <_sbrk_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	4d05      	ldr	r5, [pc, #20]	; (800400c <_sbrk_r+0x1c>)
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	f7fd fa72 	bl	80014e4 <_sbrk>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_sbrk_r+0x1a>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_sbrk_r+0x1a>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	200005a0 	.word	0x200005a0

08004010 <memchr>:
 8004010:	4603      	mov	r3, r0
 8004012:	b510      	push	{r4, lr}
 8004014:	b2c9      	uxtb	r1, r1
 8004016:	4402      	add	r2, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	4618      	mov	r0, r3
 800401c:	d101      	bne.n	8004022 <memchr+0x12>
 800401e:	2000      	movs	r0, #0
 8004020:	e003      	b.n	800402a <memchr+0x1a>
 8004022:	7804      	ldrb	r4, [r0, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	428c      	cmp	r4, r1
 8004028:	d1f6      	bne.n	8004018 <memchr+0x8>
 800402a:	bd10      	pop	{r4, pc}

0800402c <memcpy>:
 800402c:	440a      	add	r2, r1
 800402e:	4291      	cmp	r1, r2
 8004030:	f100 33ff 	add.w	r3, r0, #4294967295
 8004034:	d100      	bne.n	8004038 <memcpy+0xc>
 8004036:	4770      	bx	lr
 8004038:	b510      	push	{r4, lr}
 800403a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403e:	4291      	cmp	r1, r2
 8004040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004044:	d1f9      	bne.n	800403a <memcpy+0xe>
 8004046:	bd10      	pop	{r4, pc}

08004048 <_realloc_r>:
 8004048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	4680      	mov	r8, r0
 800404e:	4614      	mov	r4, r2
 8004050:	460e      	mov	r6, r1
 8004052:	b921      	cbnz	r1, 800405e <_realloc_r+0x16>
 8004054:	4611      	mov	r1, r2
 8004056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800405a:	f7ff bc37 	b.w	80038cc <_malloc_r>
 800405e:	b92a      	cbnz	r2, 800406c <_realloc_r+0x24>
 8004060:	f7ff fbcc 	bl	80037fc <_free_r>
 8004064:	4625      	mov	r5, r4
 8004066:	4628      	mov	r0, r5
 8004068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800406c:	f000 f81b 	bl	80040a6 <_malloc_usable_size_r>
 8004070:	4284      	cmp	r4, r0
 8004072:	4607      	mov	r7, r0
 8004074:	d802      	bhi.n	800407c <_realloc_r+0x34>
 8004076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800407a:	d812      	bhi.n	80040a2 <_realloc_r+0x5a>
 800407c:	4621      	mov	r1, r4
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fc24 	bl	80038cc <_malloc_r>
 8004084:	4605      	mov	r5, r0
 8004086:	2800      	cmp	r0, #0
 8004088:	d0ed      	beq.n	8004066 <_realloc_r+0x1e>
 800408a:	42bc      	cmp	r4, r7
 800408c:	4622      	mov	r2, r4
 800408e:	4631      	mov	r1, r6
 8004090:	bf28      	it	cs
 8004092:	463a      	movcs	r2, r7
 8004094:	f7ff ffca 	bl	800402c <memcpy>
 8004098:	4631      	mov	r1, r6
 800409a:	4640      	mov	r0, r8
 800409c:	f7ff fbae 	bl	80037fc <_free_r>
 80040a0:	e7e1      	b.n	8004066 <_realloc_r+0x1e>
 80040a2:	4635      	mov	r5, r6
 80040a4:	e7df      	b.n	8004066 <_realloc_r+0x1e>

080040a6 <_malloc_usable_size_r>:
 80040a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040aa:	1f18      	subs	r0, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bfbc      	itt	lt
 80040b0:	580b      	ldrlt	r3, [r1, r0]
 80040b2:	18c0      	addlt	r0, r0, r3
 80040b4:	4770      	bx	lr
	...

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
